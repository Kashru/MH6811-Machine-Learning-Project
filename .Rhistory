# Real prediction on the test set
ffnn.real <- sapply(test, t)
# Standardization of the features:
library(CatEncoders)
t <- function(x) {
# check if x is numeric
if(is.numeric(x)) {
return (x)
}
l <- LabelEncoder.fit(x)
y <- transform(l, x)
return (y)
}
ffnn.train.X <- sapply(pd.train.X, t)
ffnn.test.X <- sapply(pd.test.X, t)
ffnn.train.X.mean <- apply(ffnn.train.X, 2, mean)
ffnn.train.X.sd <- apply(ffnn.train.X, 2, sd)
ffnn.train.X.scaled<-scale(ffnn.train.X,center=ffnn.train.X.mean,scale=ffnn.train.X.sd)
ffnn.test.X.scaled<-scale(ffnn.test.X,center=ffnn.train.X.mean,scale=ffnn.train.X.sd)
ffnn.train.scaled<-data.frame(ffnn.train.X.scaled,Loan_Status=pd.train.Y)
ffnn.test.scaled<-data.frame(ffnn.test.X.scaled,Loan_Status=pd.test.Y)
ffnn.train.X.scaled<-as.matrix(ffnn.train.X.scaled)
ffnn.test.X.scaled<-as.matrix(ffnn.test.X.scaled)
# Real prediction on the test set
ffnn.real <- sapply(test, t)
ffnn.real.mean <- apply(ffnn.real, 2, mean)
ffnn.real.sd <- apply(ffnn.real, 2, sd)
ffnn.real.scaled <- scale(ffnn.real,center=ffnn.real.mean,scale=ffnn.real.sd)
ffnn.real.scaled <- as.matrix(ffnn.real.scaled)
loan.neunet.real.pred.prob <- predict(loan.neunet.rep, ffnn.real.scaled, rep=bestrep) # Predicted "Probability" for each class
loan.neunet.real.pred <- as.factor(max.col(loan.neunet.real.pred.prob))
levels(loan.neunet.real.pred)<-levels(as.factor(ffnn.test.scaled$Loan_Status))
# Real prediction on the test set
ffnn.real <- sapply(test, t)
ffnn.real.mean <- apply(ffnn.real, 2, mean)
ffnn.real.sd <- apply(ffnn.real, 2, sd)
ffnn.real.scaled <- scale(ffnn.real,center=ffnn.real.mean,scale=ffnn.real.sd)
ffnn.real.scaled <- as.matrix(ffnn.real.scaled)
loan.neunet.real.pred.prob <- predict(loan.neunet.rep, ffnn.real.scaled, rep=bestrep) # Predicted "Probability" for each class
loan.neunet.real.pred <- as.factor(max.col(loan.neunet.real.pred.prob))
levels(loan.neunet.real.pred)<-levels(as.factor(ffnn.test.scaled$Loan_Status))
summary(loan.neunet.real.pred)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled, batch_size = 1)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled,y.keras.test.ohc, batch_size = 1)
set.seed(114514)
# create sequential model
ffnn.keras.model = keras_model_sequential()
# Feedforward Neural Networks with Keras and TensorFlow
library(keras)
library(tensorflow)
y.keras <- as.factor(pd.train.Y)
levels(y.keras) = 0:1
y.keras.ohc = to_categorical(y.keras , num_classes = 2)
set.seed(114514)
# create sequential model
ffnn.keras.model = keras_model_sequential()
# add layers, first layer needs input dimension
ffnn.keras.model %>%
layer_dense(input_shape = ncol(ffnn.train.X.scaled), units = 10, activation = "relu") %>%
layer_dense(units = 10, activation = "relu") %>%
layer_dense(units = 2, activation = "softmax")
# add a loss function and optimizer
ffnn.keras.model %>%
compile(
loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = "accuracy"
)
# fit model with our training data set, training will be done for 200 times data set
loan.ffnn.keras = ffnn.keras.model %>%
fit(
x = ffnn.train.X.scaled,
y = y.keras.ohc,
shuffle = T,
epochs = 100
)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled, batch_size = 1)
y.keras <- as.factor(pd.test.Y)
levels(y.keras) = 0:1
y.keras.test.ohc = to_categorical(y , num_classes = 2)
evaluate(ffnn.keras.model, ffnn.test.X.scaled, y.keras.test.ohc, batch_size =1)
loan.keras.pred.prob<-predict(ffnn.keras.model, ffnn.test.X.scaled, y.keras.test.ohc, batch_size =1)
loan.keras.pred<-as.factor(max.col(loan.keras.pred.prob))
levels(loan.keras.pred) <- levels(as.factor(pd.test.Y))
keras.pred.table <- table(loan.keras.pred, pd.test.Y)
confusionMatrix(keras.pred.table)
library("caret")
confusionMatrix(keras.pred.table)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled, batch_size = 1)
# Real prediction on the test set
loan.keras.real.pred.prob <- predict(ffnn.keras.model, ffnn.real.scaled, y.keras.test.ohc, batch_size = 1)
# Real prediction on the test set
loan.keras.real.pred <- ffnn.keras.model.predict_classes(ffnn.real.scaled)
# Real prediction on the test set
loan.keras.real.pred <- ffnn.keras.model %>% predict_classes(ffnn.real.scaled)
# Real prediction on the test set
loan.keras.real.pred <- ffnn.keras.model %>% predict(ffnn.real.scaled)
View(ffnn.real)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- ffnn.keras.model %>% predict(ffnn.real.scaled)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- ffnn.keras.model %>% predict_classes(ffnn.real.scaled)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled, batch_size =1)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled, y.keras.test.ohc, batch_size =1)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled,  batch_size =1)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- keras_predict(ffnn.keras.model, ffnn.real.scaled,  batch_size =1)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- predict(loan.ffnn.keras, ffnn.real.scaled)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled)
# Real prediction on the test set
ffnn.real <- sapply(test, t)
ffnn.real.mean <- apply(ffnn.real, 2, mean)
ffnn.real.sd <- apply(ffnn.real, 2, sd)
ffnn.real.scaled <- scale(ffnn.real,center=ffnn.real.mean,scale=ffnn.real.sd)
ffnn.real.scaled <- as.matrix(ffnn.real.scaled)
loan.neunet.real.pred.prob <- predict(loan.neunet.rep, ffnn.real.scaled, rep=bestrep) # Predicted "Probability" for each class
loan.neunet.real.pred <- as.factor(max.col(loan.neunet.real.pred.prob))
levels(loan.neunet.real.pred)<-levels(as.factor(ffnn.test.scaled$Loan_Status))
summary(loan.neunet.real.pred)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[2:12,]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled)
# Real prediction on the test set
ffnn.real <- sapply(test, t)
ffnn.real.mean <- apply(ffnn.real, 2, mean)
ffnn.real.sd <- apply(ffnn.real, 2, sd)
ffnn.real.scaled <- scale(ffnn.real,center=ffnn.real.mean,scale=ffnn.real.sd)
ffnn.real.scaled <- as.matrix(ffnn.real.scaled)
loan.neunet.real.pred.prob <- predict(loan.neunet.rep, ffnn.real.scaled, rep=bestrep) # Predicted "Probability" for each class
loan.neunet.real.pred <- as.factor(max.col(loan.neunet.real.pred.prob))
levels(loan.neunet.real.pred)<-levels(as.factor(ffnn.test.scaled$Loan_Status))
summary(loan.neunet.real.pred)
# Real prediction on the test set
ffnn.real.scaled <- ffnn.real.scaled[,-1]
loan.keras.real.pred <- predict(ffnn.keras.model, ffnn.real.scaled)
levels(loan.keras.real.pred)<-levels(as.factor(ffnn.test.scaled$Loan_Status))
summary(loan.neunet.real.pred)
