# Read data
train.origin <- read.table('train.csv')
# Read data
train.origin <- read.table('train.csv', fileEncoding = "UTF-8", stringsAsFactors = FALSE)
# Read data
train.origin <- read.table('train.csv', fileEncoding = "UTF-8", stringsAsFactors = FALSE, fill = TRUE)
train <- unique(train.origin)
train <- na.omit(train)
View(train)
train <- unique(train.origin)
# Read data
train.origin <- read.table('train.csv', fileEncoding = "UTF-8", stringsAsFactors = FALSE, fill = TRUE)
train <- unique(train.origin)
train <- na.omit(train)
# Read data
train.origin <- read.table('train.csv', fill = TRUE)
summary(train.origin)
sum(is.na(train.origin))
# Read data
train.origin <- read.table('train.csv', skipNul = TRUE)
# Read data
train.origin <- read.table('train.csv', fill = TRUE)
View(train.origin)
# Read data
train.origin <- read.table('train.csv', fill = TRUE, sep = ",")
View(train.origin)
sum(is.na(train.origin))
View(train.origin)
summary(train.origin)
# Read data
train.origin <- read.table('train.csv', sep = ",")
summary(train.origin)
sum(is.na(train.origin))
# Read data
train.origin <- read.table('train.csv', sep = ",")
summary(train.origin)
sum(is.na(train.origin))
View(train.origin)
# Read data
library(mice)
# Read data
install.packages("mice")
library(mice)
md.pattern(train.origin)
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c('NA',''))
summary(train.origin)
sum(is.na(train.origin))
View(train.origin)
View(train.origin)
# Read data
install.packages("DMwR")
# Read data
library(mice)
# Read data
library(mice)
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c('NA',''))
summary(train.origin)
sum(is.na(train.origin))
md.pattern(train.origin)
imp <- mice(train.origin, seed=1234)
# Read data
install.packages("SeqKnn")
imp <- mice(train.origin, remove.collinear=FALSE)
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c('NA',''))
summary(train.origin)
sum(is.na(train.origin))
library(mice)
md.pattern(train.origin)
init = mice(train.origin, maxit=0)
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''))
summary(train.origin)
sum(is.na(train.origin))
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
View(train.origin)
md.pattern(train.origin)
md.pattern(train.origin)
View(train.origin)
tempData <- mice(train.origin["Gender"],m=5,maxit=50,meth='pmm')
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c('NA',''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin["Gender"],m=5,maxit=50,meth='pmm')
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
summary(tempData)
train <- complete(tempData,1)
View(train)
sum(is.na(train))
tempData <- mice(train,m=5,maxit=50,meth='pmm')
summary(tempData)
train <- complete(tempData,1)
sum(is.na(train))
tempData <- mice(train.origin,m=10,maxit=50,meth='pmm')
summary(tempData)
train <- complete(tempData,1)
sum(is.na(train))
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin,m=10,maxit=50,meth='pmm')
summary(tempData)
train <- complete(tempData,1)
sum(is.na(train))
train <- complete(tempData,2)
sum(is.na(train))
init = mice(train.origin, maxit=0)
meth = init$method
predM = init$predictorMatrix
imputed = mice(train.origin, method=meth, predictorMatrix=predM, m=5)
imputed <- complete(imputed)
sapply(imputed, function(x) sum(is.na(x)))
train <- imputed
# Read data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
library(mice)
md.pattern(train.origin)
imputed = mice(train.origin, method=meth, predictorMatrix=predM, m=5)
imputed <- complete(imputed)
tempData <- mice(data,m=5,maxit=50,meth='pmm')
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
summary(tempData)
completedData <- complete(tempData)
sapply(completedData, function(x) sum(is.na(x)))
train <- completedData
# Read test data
test.origin <- read.table('test.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(test.origin)
sum(is.na(test.origin))
# Handle missing values in test data
md.pattern(test.origin)
# Handle missing values in training data
library(mice)
# Handle missing values in test data
md.pattern(test.origin)
tempData2 <- mice(test.origin,m=5,maxit=50,meth='pmm')
summary(tempData2)
completedData2 <- complete(tempData2)
sapply(completedData2, function(x) sum(is.na(x)))
test <- completedData2
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,-"Loan_Status"]
pd.train.X <- pd.train[,-c("Loan_Status")]
View(pd.train)
pd.train.X <- pd.train["Gender":"Property_Area"]
pd.train.X <- pd.train[,c("Gender":"Property_Area")]
pd.train.X <- pd.train[,c('Gender':'Property_Area')]
pd.train.X <- pd.train[,c(2,3,4,5,6,7,8,9,10,11,12)]
pd.train.X <- pd.train[,c(2:12)]
View(pd.train.X)
pd.test.X <- pd.test[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[13]
View(pd.train.Y)
pd.test.Y <- pd.test[13]
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
train %>% fill(Gender)
fill(train)
library(tidyr)
fill(train)
fill(test)
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[13]
pd.test.Y <- pd.test[13]
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
View(train)
# Read training data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
# Handle missing values in training data
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
summary(tempData)
completedData <- complete(tempData)
sapply(completedData, function(x) sum(is.na(x)))
train <- completedData
library(tidyr)
fill(train)
sum(is.na(train))
fill.NAs(train)
train %>% fill(Gender, Married, Dependents, Self_Employed)
sum(is.na(train))
View(train)
library(zoo)
install.packages("zoo")
library(zoo)
na.locf(na.locf(train),fromLast=TRUE)
sum(is.na(train))
train <-na.locf(na.locf(train),fromLast=TRUE)
sum(is.na(train))
# Read training data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
# Handle missing values in training data
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
summary(tempData)
completedData <- complete(tempData)
sapply(completedData, function(x) sum(is.na(x)))
train <- completedData
library(tidyr)
train <- fill(train)
sum(is.na(train))
library(zoo)
train <- na.locf(na.locf(df1),fromLast=TRUE)
train <- na.locf(na.locf(train),fromLast=TRUE)
sum(is.na(train))
# Read test data
test.origin <- read.table('test.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(test.origin)
sum(is.na(test.origin))
# Handle missing values in test data
md.pattern(test.origin)
tempData2 <- mice(test.origin,m=5,maxit=50,meth='pmm')
summary(tempData2)
completedData2 <- complete(tempData2)
sapply(completedData2, function(x) sum(is.na(x)))
test <- completedData2
test <- na.locf(na.locf(test),fromLast=TRUE)
sum(is.na(test))
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[13]
pd.test.Y <- pd.test[13]
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
pd.train.Y <- pd.train[,13]
pd.test.Y <- pd.test[,13]
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
table(knn.pred, pd.test.Y)
pd.train.Y <- pd.train[,1]
sum(is.na(pd.train.X))
sum(is.na(pd.train.Y))
sum(is.na(pd.test.X))
pd.train.Y <- pd.train[,13]
sum(is.na(pd.train.Y))
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
View(pd.train.X)
sum(is.na(pd.train.X))
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
View(pd.train.X)
View(pd.train.X)
pd.train.X <- unclass(pd.train.X)
pd.test.X <- unclass(pd.test.X)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
pd.train.Y <- unclass(pd.train.Y)
pd.test.Y <- unclass(pd.test.Y)
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[,13]
pd.test.Y <- pd.test[,13]
pd.train.X <- sapply(pd.train[,c(2:12)],unclass)
View(pd.train.X)
pd.test.X <- sapply(pd.test[,c(2:12)],unclass)
pd.train.Y <- pd.train[,13]
pd.test.Y <- pd.test[,13]
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
pd.train.Y <- unclass(pd.train[,13])
pd.test.Y <- unclass(pd.test[,13])
library(class)
knn.pred <- knn(train = pd.train.X, test = pd.test.X, cl = pd.train.Y, k = 5)
table(knn.pred, pd.test.Y)
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[,13]
pd.test.Y <- pd.test[,13]
t <- function(x) {
# check if x is numeric
if(is.numeric(x)) {
return (x)
}
l <- LabelEncoder.fit(x)
y <- transform(l, x)
return (y)
}
knn.train.X <- sapply(pd.train.X, t)
knn.test.X <- sapply(pd.train.Y, t)
library(CatEncoders)
install.packages("CatEncoders")
library(CatEncoders)
knn.train.X <- sapply(pd.train.X, t)
knn.test.X <- sapply(pd.train.Y, t)
knn.pred <- knn(train = knn.train.X, test = knn.test.X, cl = pd.train.Y, k = 5)
knn.test.X <- sapply(pd.test.X, t)
knn.pred <- knn(train = knn.train.X, test = knn.test.X, cl = pd.train.Y, k = 5)
table(knn.pred, pd.test.Y)
# Read training data
train.origin <- read.table('train.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(train.origin)
sum(is.na(train.origin))
# Handle missing values in training data
library(mice)
md.pattern(train.origin)
tempData <- mice(train.origin,m=5,maxit=50,meth='pmm')
summary(tempData)
completedData <- complete(tempData)
sapply(completedData, function(x) sum(is.na(x)))
train <- completedData
library(zoo)
train <- na.locf(na.locf(train),fromLast=TRUE)
sum(is.na(train))
# Read test data
test.origin <- read.table('test.csv', sep = ",", stringsAsFactors = FALSE,na.strings=c(NA,''), header=TRUE)
summary(test.origin)
sum(is.na(test.origin))
# Handle missing values in test data
md.pattern(test.origin)
tempData2 <- mice(test.origin,m=5,maxit=50,meth='pmm')
summary(tempData2)
completedData2 <- complete(tempData2)
sapply(completedData2, function(x) sum(is.na(x)))
test <- completedData2
test <- na.locf(na.locf(test),fromLast=TRUE)
sum(is.na(test))
# Train with knn
# Divide the train and test data sets for training with a ratio of 7:3
set.seed(114514)
sub<-sample(1:nrow(train),round(nrow(train)*7/10))
length(sub)
pd.train<-train[sub,]
pd.test<-train[-sub,]
pd.train.X <- pd.train[,c(2:12)]
pd.test.X <- pd.test[,c(2:12)]
pd.train.Y <- pd.train[,13]
pd.test.Y <- pd.test[,13]
library(CatEncoders)
t <- function(x) {
# check if x is numeric
if(is.numeric(x)) {
return (x)
}
l <- LabelEncoder.fit(x)
y <- transform(l, x)
return (y)
}
knn.train.X <- sapply(pd.train.X, t)
knn.test.X <- sapply(pd.test.X, t)
library(class)
knn.pred <- knn(train = knn.train.X, test = knn.test.X, cl = pd.train.Y, k = 5)
table(knn.pred, pd.test.Y)
mean(knn.pred != pd.test.Y) #MSE
